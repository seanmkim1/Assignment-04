---
title: "Assignment 04"
author: "Sean Kim"
format:
  html:
    embed-resources: true
---

```{r}
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  rowSums(mat)
}

# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
   apply(mat, 2, cumsum)
}
```

```{r}
# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)

```

```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132

```

```{r}
# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

```{r}
library(parallel)

# Set up parallel processing with 3 cores
cl <- makeCluster(3)

# Export necessary functions to the workers
clusterExport(cl, c("runif", "rowSums"))

# Parallelize sim_pi using parLapply
sim_pi_parallel <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n * 2), ncol = 2)
  
  # Parallelized computation
  result_list <- parLapply(cl, 1:i, function(x) rowSums(p^2) < 1)
  
  # Combine and process the results
  ans <- unlist(result_list) * 4
  print(mean(ans))
}

# Run the parallelized code
system.time({
  sim_pi_parallel(4000, n = 10000)
})

# Stop the cluster
stopCluster(cl)


```

```{r}

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

```{sql connection=con}
SELECT rating, COUNT(film.film_id) AS num_movies
FROM film
JOIN film_category ON film.film_id = film_category.film_id
GROUP BY rating;
```

```{sql connection=con}
SELECT rating AS rating_category, AVG(f.replacement_cost) AS avg_replacement_cost, AVG(f.rental_rate) AS avg_rental_rate
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
GROUP BY rating
ORDER BY rating_category;
```

```{sql connection=con}
SELECT fc.category_id, COUNT(f.film_id) AS num_films
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
GROUP BY fc.category_id
ORDER BY fc.category_id
```

```{sql connection=con}
SELECT c.name AS category_name, COUNT(f.film_id) AS num_films
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY category_name
ORDER BY num_films DESC
LIMIT 1
```
